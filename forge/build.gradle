plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
loom {
    forge {
        mixinConfig "rnf-common.mixins.json"
        mixinConfig "rnf.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    // Geckolib
    modImplementation "software.bernie.geckolib:${rootProject.geckolib_forge_version}"
    // Cloth Config
    modImplementation("me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}")

    // JEI
    // compile against the JEI API but do not include it at runtime
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // Curios
    modCompileOnlyApi("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    modRuntimeOnly("top.theillusivec4.curios:curios-forge:${curios_version}")

    // TOP
    //modRuntimeOnly("curse.maven:top-245211:3671753")

    // Mores
    //modRuntimeOnly("curse.maven:mores-556697:3681536")

    // Unearthed Compat
    modCompileOnlyApi("curse.maven:hyle-${hyle_curse_maven_project_id}:${hyle_curse_maven_forge_file_id}")
    //modRuntimeOnly("curse.maven:hyle-${hyle_curse_maven_project_id}:${hyle_curse_maven_forge_file_id}")
    //modRuntimeOnly("curse.maven:unearthed-${unearthed_curse_maven_project_id}:${unearthed_curse_maven_forge_file_id}")

    // Hexerei
    modImplementation("curse.maven:hexerei-548599:3785792")

    // Shutup Experimental Settings
    modRuntimeOnly("curse.maven:shutup-407174:3759881")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
